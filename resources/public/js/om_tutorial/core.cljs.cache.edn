;; Analyzed by ClojureScript 1.7.145
{:use-macros {defroute secretary.core, html sablono.core, defui om.next}, :excludes #{}, :name om-tutorial.core, :imports nil, :requires {storm-blog.db storm-blog.db, goog.dom goog.dom, secretary secretary.core, dom om.dom, html sablono.core, cb ext.chessboard, om.dom om.dom, datascript.core datascript.core, db storm-blog.db, sablono.core sablono.core, gdom goog.dom, om om.next, secretary.core secretary.core, ext.chessboard ext.chessboard, om.next om.next, d datascript.core}, :uses nil, :defs {cb-position! {:protocol-inline nil, :meta {:file "/usr/home/storm/clojure/om-tutorial/src/om_tutorial/core.cljs", :line 166, :column 7, :end-line 166, :end-column 19, :arglists (quote ([board fem]))}, :name om-tutorial.core/cb-position!, :variadic false, :file "src/om_tutorial/core.cljs", :end-column 19, :method-params ([board fem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 2, :fn-var true, :arglists (quote ([board fem]))}, make-boards {:protocol-inline nil, :meta {:file "/usr/home/storm/clojure/om-tutorial/src/om_tutorial/core.cljs", :line 19, :column 7, :end-line 19, :end-column 18, :arglists (quote ([]))}, :name om-tutorial.core/make-boards, :variadic false, :file "src/om_tutorial/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, mutate {:name om-tutorial.core/mutate, :file "src/om_tutorial/core.cljs", :line 58, :column 1, :end-line 58, :end-column 17, :meta {:file "/usr/home/storm/clojure/om-tutorial/src/om_tutorial/core.cljs", :line 58, :column 11, :end-line 58, :end-column 17}}, conn {:name om-tutorial.core/conn, :file "src/om_tutorial/core.cljs", :line 15, :column 1, :end-line 15, :end-column 10, :meta {:file "/usr/home/storm/clojure/om-tutorial/src/om_tutorial/core.cljs", :line 15, :column 6, :end-line 15, :end-column 10}}, read {:name om-tutorial.core/read, :file "src/om_tutorial/core.cljs", :line 35, :column 1, :end-line 35, :end-column 15, :meta {:file "/usr/home/storm/clojure/om-tutorial/src/om_tutorial/core.cljs", :line 35, :column 11, :end-line 35, :end-column 15}}, Header {:protocol-inline nil, :meta {:jsdoc ["@constructor"], :arglists (quote ([])), :file nil}, :name om-tutorial.core/Header, :variadic false, :file "src/om_tutorial/core.cljs", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :jsdoc ["@constructor"]}, make-board {:protocol-inline nil, :meta {:file "/usr/home/storm/clojure/om-tutorial/src/om_tutorial/core.cljs", :line 120, :column 7, :end-line 120, :end-column 17, :arglists (quote ([id f]))}, :name om-tutorial.core/make-board, :variadic false, :file "src/om_tutorial/core.cljs", :end-column 17, :method-params ([id f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 2, :fn-var true, :arglists (quote ([id f]))}, testa {:name om-tutorial.core/testa, :file "src/om_tutorial/core.cljs", :line 17, :column 1, :end-line 17, :end-column 11, :meta {:file "/usr/home/storm/clojure/om-tutorial/src/om_tutorial/core.cljs", :line 17, :column 6, :end-line 17, :end-column 11}}, reconciler {:name om-tutorial.core/reconciler, :file "src/om_tutorial/core.cljs", :line 156, :column 1, :end-line 156, :end-column 16, :meta {:file "/usr/home/storm/clojure/om-tutorial/src/om_tutorial/core.cljs", :line 156, :column 6, :end-line 156, :end-column 16}}, cb-start! {:protocol-inline nil, :meta {:file "/usr/home/storm/clojure/om-tutorial/src/om_tutorial/core.cljs", :line 163, :column 7, :end-line 163, :end-column 16, :arglists (quote ([board]))}, :name om-tutorial.core/cb-start!, :variadic false, :file "src/om_tutorial/core.cljs", :end-column 16, :method-params ([board]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 1, :fn-var true, :arglists (quote ([board]))}, ChessBoard {:protocol-inline nil, :meta {:jsdoc ["@constructor"], :arglists (quote ([])), :file nil}, :name om-tutorial.core/ChessBoard, :variadic false, :file "src/om_tutorial/core.cljs", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :jsdoc ["@constructor"]}, Counter {:protocol-inline nil, :meta {:jsdoc ["@constructor"], :arglists (quote ([])), :file nil}, :name om-tutorial.core/Counter, :variadic false, :file "src/om_tutorial/core.cljs", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :jsdoc ["@constructor"]}}, :require-macros {om om.next, om.next om.next, dom om.dom, om.dom om.dom, html sablono.core, sablono.core sablono.core, secretary secretary.core, secretary.core secretary.core}, :cljs.analyzer/constants {:seen #{:find :selector pull ?selector :where app/add-game :read js/ChessBoard :om.next/queries :fem :config :game :default app/increment :app/game :li :board/fem :value :state :app/header :board/game :header :prefix :widget/type :app/title :parser :app/board :app/counter $ :header/title app/change-board :span.icon-bar :class :indexer :board/title :app/count :db/id app/set-game :action .objToFen :hierarchy ... :entity ?e :mutate :href :a :in}, :order [:prefix :db/id :app/title :app/count :hierarchy :default :app/board :state :selector :value :find pull ?e ?selector ... :in $ :where :app/counter :app/header :widget/type :header app/increment :action app/add-game :entity :game :board/game app/set-game :fem :board/fem app/change-board :app/game :config :indexer :om.next/queries :header/title :span.icon-bar :li :a :href :class .objToFen js/ChessBoard :board/title :parser :read :mutate]}, :doc nil}